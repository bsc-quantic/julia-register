name: Register Julia package on private registry
description: Like Registrator but for federated registries
branding:
  icon: 'package'
  color: 'purple'
inputs:
  registry:
    description: URL of the private registry
    required: true
  push:
    description: If true, push to a custom branch in the registry
    required: true
    default: true
  name:
    description: Name of the bot requesting the registration
    required: true
    default: 'github-actions[bot]'
  email:
    description: Email address of the bot requesting the PR registration
    required: true
    default: '41898282+github-actions[bot]@users.noreply.github.com'
  branch:
    description: If `inputs.push=true`, branch where the registering package will be uploaded.
    required: false
outputs:
  name:
    description: Project name
    value: ${{ steps.register-package.outputs.name }}
  uuid:
    description: Project UUID
    value: ${{ steps.register-package.outputs.uuid }}
  version:
    description: Project version
    value: ${{ steps.register-package.outputs.version }}
  hash:
    description: Tree hash of the registering package
    value: ${{ steps.register-package.outputs.hash }}
  branch:
    description: If `inputs.push=true`, branch where the registering package will be uploaded
    value: ${{ steps.register-package.outputs.branch }}
  path:
    description: Path to the local registry.
    value: ${{ steps.register-package.outputs.path }}
runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        julia -e '
          using Pkg
          Pkg.add("RegistryTools")
          Pkg.add("HTTP")
        '
    - name: Register package
      id: register-package
      shell: bash
      run: |
        julia -e '
          using Logging
          using Pkg
          using Pkg: GitTools
          using RegistryTools
          using HTTP: URI
          using LibGit2

          pkg_url = String(readchomp(`git remote get-url origin`))
          @info "Package URL: $pkg_url"

          project = RegistryTools.Project("Project.toml")
          isnothing(project) && error("Project file not found")
          @info "Project: $(project.name) = $(project.uuid) @ $(project.version)"

          tree_hash = String(readchomp(`git rev-parse HEAD^\{tree\}`))
          @info "Tree hash: $tree_hash"

          const private_reg_url = GitTools.normalize_url("${{ inputs.registry }}")
          const general_reg_url = "https://github.com/JuliaRegistries/General"
          @info "Registry: $private_reg_url"

          const branch = get(ENV, "INPUTS_BRANCH", "register/$(project.name)/$(project.version)")

          cd(mktempdir()) do
            # adapted from fregante/setup-git-user@v1, https://stackoverflow.com/a/71984173
            regbranch = RegistryTools.register(pkg_url, project, tree_hash;
              registry = private_reg_url,
              registry_deps = [general_reg_url],
              push = ${{ inputs.push }},
              branch = branch,
              gitconfig = Dict(
                "user.name" => "${{ inputs.name }}",
                "user.email" => "${{ inputs.email }}",
                "url.$(string(URI(URI(private_reg_url); userinfo="${{ inputs.botname }}:$(ENV["GITHUB_TOKEN"])"))).insteadOf" => private_reg_url
              ))
            @info regbranch
            if haskey(regbranch.metadata, "error")
              if regbranch.metadata["kind"] == "New version" && regbranch.metadata["error"] == "Version $(project.version) already exists"
                println("::warning file=Project.toml::Version $(project.version) already exists")
              else
                println("::error file=Project.toml,title=$(regbranch.metadata["kind"])::$(regbranch.metadata["error"])")
              end
            end
          end

          registry_repo = RegistryTools.get_registry(private_reg_url; force_reset=false)
          @info registry_repo

          open(ENV["GITHUB_OUTPUT"],"w") do io
            println(io, "name=$(project.name)")
            println(io, "uuid=$(project.uuid)")
            println(io, "version=$(project.version)")
            println(io, "hash=$tree_hash")
            println(io, "branch=$branch")
            println(io, "path=$(LibGit2.path(registry_repo))")
          end
        '